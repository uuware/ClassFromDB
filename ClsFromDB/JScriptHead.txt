//JScript function collect
//==============================================================================共通関数　START
//for msgbox
var objShell = new ActiveXObject("WScript.Shell");
//for access to file
var objFile = new ActiveXObject("Scripting.FileSystemObject");

//trim
function trim(s){
  if(s)
  {
    var re= /^\s*|\s*$/g;
    return s.replace(re,"");
  }
  else
    return "";
}

//replaceAll
function replaceAll(str, from, to)
{
  str = str.replace(new RegExp(from, "g"), to);
  return str;
}

//get bytelen
function getByteLen(s){
  var i, cnt = 0;
  for(i = 0; i < s.length; i++)
    if(escape(s.charAt(i)).length >= 4)
      cnt += 2;
    else
      cnt++;
  return cnt;
}

//OK:1,Yes:6,No:7,Cancel:2
function msgbox(msg, isYesNoCancel)
{
  var nChoice;
  var nOption = 0;
  if(isYesNoCancel == true)
  {
    nOption = 35;
  }
  var objShellSub;
  if(typeof(objShell) == "object")
  {
    objShellSub = objShell;
  }
  else
  {
    objShellSub = new ActiveXObject("WScript.Shell");
  }
  //nChoice = obj.Popup(text, timeout, title, features);
  nChoice = objShellSub.Popup(msg, 0 , "msg...", nOption);
  objShellSub = null;
  return nChoice;
}

//file is exist ot not
function fexist(filename)
{
  var file_name;
  file_name = trim(filename);
  if(file_name == "")
  {
    return false;
  }
  var objFileSub;
  if(typeof(objFile) == "object")
  {
    objFileSub = objFile;
  }
  else
  {
    objFileSub = new ActiveXObject("Scripting.FileSystemObject");
  }
  if(!objFileSub.FileExists(file_name))
  {
    return false;
  }
  objFileSub = null;
  return true;
}

//ForReading 1,ForWriting 2,ForAppending 8
function fread(filename)
{
  var file_name;
  file_name = trim(filename);
  if(file_name == "")
  {
    return null;
  }
  var objFileSub;
  if(typeof(objFile) == "object")
  {
    objFileSub = objFile;
  }
  else
  {
    objFileSub = new ActiveXObject("Scripting.FileSystemObject");
  }
  if(!objFileSub.FileExists(file_name))
  {
    return null;
  }
  else
  {
    var Hnd,sTxt;
    //1 Open a file for reading only, 2 Open a file for writing,8 Open a file and write to the end of the file.
    Hnd = objFileSub.OpenTextFile(file_name, 1);
    if(!Hnd.AtEndOfStream)
    {
      sTxt = Hnd.readall();
    }
    Hnd.Close();
  }
  objFileSub = null;
  return sTxt;
}

function fwrite(filename,writestr,isAppend)
{
  var file_name;
  file_name = trim(filename);
  if(file_name == "")
  {
    return null;
  }
  var objFileSub,Hnd;
  if(typeof(objFile) == "object")
  {
    objFileSub = objFile;
  }
  else
  {
    objFileSub = new ActiveXObject("Scripting.FileSystemObject");
  }
  if(!objFileSub.FileExists(file_name))
  {
    file_name = replaceAll(file_name, "/", "\\")
    var t_1 = file_name.lastIndexOf("\\");
    if(t_1 > 0)
    {
      var pp = file_name.substring(0, t_1 + 1);
      dircreate(pp);
    }
    Hnd = objFileSub.CreateTextFile(file_name, true);
  }
  else
  {
    if(isAppend == true)
      //1 Open a file for reading only, 2 Open a file for writing,8 Open a file and write to the end of the file.
      Hnd = objFileSub.OpenTextFile(file_name, 8);
    else
      Hnd = objFileSub.OpenTextFile(file_name, 2);
  }
  Hnd.Write(writestr);
  Hnd.Close();
  objFileSub = null;
  return true;
}

function fappend(filename,writestr)
{
  return fwrite(filename,writestr,true);
}

function dircreate(path)
{
  try
  {
    var objFileSub,Hnd;
    if(typeof(objFile) == "object")
    {
      objFileSub = objFile;
    }
    else
    {
      objFileSub = new ActiveXObject("Scripting.FileSystemObject");
    }
    path = replaceAll(path, "/", "\\") + "\\";
    var position,path1;
    position = 1;
    while(path.indexOf("\\", position) > 0)
    {
      position = path.indexOf("\\", position) + 1;
      path1 = path.substring(0, position - 1);
      if(!objFileSub.FolderExists(path1))
        objFileSub.CreateFolder(path1);
    }
    objFileSub = null;
  }
  catch(e){
    return false;
  }
  return true;
}
//==============================================================================共通関数　END
var debug = false;

//==============================================================================業務
//一覧画面に表示行数
var nListItemCount = 20;
//一覧画面の一行に表示可能の桁数
var nListWinWidth = 100;
//新規修正画面に項目最大サイズ
var nItemModifySizeMax = 40;
//一覧画面の一行に実際表示桁数、GlobalProcess()に計算
var nListItemWidthCount;

//名称に、_を除く
function changeFieldName(sName)
{
  var str = sName.toLowerCase();
  if(str.IndexOf('_') > 0)
  {
    str = str.substring(str.IndexOf('_') + 1);
  }
  if(str.lastIndexOf('_') > 0)
  {
    str = str.substring(0, str.lastIndexOf('_'));
  }
  //xxxx -> Xxxxに変更
  if(str.length > 1)
  {
    str = str.substring(0, 1).toUpperCase() + str.substring(1);
  }
  else
  {
    str = str.toUpperCase();
  }
  return str;
}
if(debug)
{
  writemsg('\r\nTest ChangeFieldName from ' + '"aB_cd_EF" to "' + changeFieldName('aB_cd_EF') + '"');
}

//コメント固定変更
function changeFieldComment(sCOMMENT)
{
  var str = replaceAll(sCOMMENT, '■', '');
  if(str.IndexOf('名称') >= 0)
  {
    str = str.replace('コード名称', '名称');
    if(str.IndexOf('文字') > 0)
    {
      if(str.IndexOf('１') > 0)
        str = '名称１';
      else if(str.IndexOf('２') > 0)
        str = '名称２';
      else if(str.IndexOf('３') > 0)
        str = '名称３';
      else if(str.IndexOf('４') > 0)
        str = '名称４';
      else if(str.IndexOf('５') > 0)
        str = '名称５';
      //writemsg(str + '->' + str + '; ');
    }
  }
  return str;
}
if(debug)
{
  writemsg('\r\nTest changeFieldComment from ' + '"■名称(４文字)" to "' + changeFieldComment('■名称(４文字)') + '"');
}

//全体処理
function GlobalProcess()
{
  var sTblName = "" + js.info['TABLE_NAME'];
  if(sTblName == 'undefined')
  {
    writemsg('TABLE_NAME未定義です！\r\n');
  }
  sTblName = sTblName.toUpperCase();
  var sOutFile = "" + js.info['TEMPLATE_FILENAME'];
  if(sOutFile == 'undefined')
  {
    writemsg('出力ファイル未定義です！\r\n');
  }
  sOutFile = sOutFile.toUpperCase();

  //一覧に全項目の幅
  var nListTDLenAll = 0;
  for(var nIndex = 0; nIndex < js.field.length; nIndex++)
  {
    //名称変更
    var sNAME = js.field[nIndex]['FIELD_NAME'];
    sNAME = changeFieldName(sNAME);
    var sNAMEUP = sNAME.toUpperCase();
    //コメント変更
    var sCOMMENT = js.field[nIndex]['FIELD_COMMENT'];
    sCOMMENT = changeFieldComment(sCOMMENT);

    var nSHOW_LENGTH = 10;
    try
    {
      nSHOW_LENGTH = parseInt('0' + js.field[nIndex]['FIELD_SHOW_LENGTH'], 10);
    }
    catch(e)
    {
    }

    //リストに表示長さ計算
    var nLENGTH = nSHOW_LENGTH;
    var isLENGTH_OK = false;
    //新規と修正画面に項目の編集サイズ、最大値nItemModifySizeMax以内
    var nMOD_LENGTH = nSHOW_LENGTH;
    //編集サイズを調整
    nMOD_LENGTH += Math.floor(1 + nMOD_LENGTH/1.3);
    if(nMOD_LENGTH > nItemModifySizeMax){
      nMOD_LENGTH = nItemModifySizeMax;
    }

    //had modified
    //if(sTblName == 'T_NAIYO01SYS' && sOutFile.indexOf('LIST.') >= 0
    // && nIndex == 0 && sCOMMENT == 'コード名称')
    //{
    //  writemsg('内容区分テーブル(T_NAIYO01SYS)に「コード(NYS_NYSKBN_CH)」がコード名称に間違っている、自動置換。\r\n');
    //  sCOMMENT = 'コード';
    //}
    //else if(sTblName == 'T_PLCCD01SYS')
    if(sTblName == 'T_PLCCD01SYS')
    {
      if(sNAMEUP == 'CHKFLG')
      {
        nLENGTH = '70';
        isLENGTH_OK = true;
        sCOMMENT = '閉架チェック';
      }
      else if(sNAMEUP == 'DSPFLG')
      {
        nLENGTH = '70';
        isLENGTH_OK = true;
        sCOMMENT = 'OPAC非表示';
      }
    }
    else if(sTblName == 'T_AUCGP01SYS' && sNAMEUP == 'AUCTXT')
    {
      nLENGTH = '';
      isLENGTH_OK = true;
    }
    else if(sTblName == 'T_AVNSR01SYS' && sNAMEUP == 'TILKNJ')
    {
      nLENGTH = '';
      isLENGTH_OK = true;
    }
    else if(sTblName == 'T_COMNT01SYS' && sNAMEUP == 'CODNAM')
    {
      nLENGTH = '';
      isLENGTH_OK = true;
    }

    var nCOMMENT_LEN = getByteLen(sCOMMENT);
    if(!isLENGTH_OK)
    {
      //値と見出しの最大長さ
      nLENGTH = nLENGTH > nCOMMENT_LEN ? nLENGTH : nCOMMENT_LEN;
      //表示長さに変更
      nLENGTH = parseInt(nLENGTH * 7.5, 10);
    }

    js.field[nIndex]['FIELD_NAME_JS'] = sNAME;
    js.field[nIndex]['FIELD_COMMENT_JS'] = sCOMMENT;
    js.field[nIndex]['FIELD_LENGTH_LIST_JS'] = nLENGTH;
    js.field[nIndex]['FIELD_LENGTH_MODIFY_JS'] = nMOD_LENGTH;

    //CheckBoxであること
    if(sNAMEUP == 'ETCFLG' || sNAMEUP == 'DELFLG')
    {
      js.field[nIndex]['CHECKBOX_JS'] = true;
    }
    else
    {
      js.field[nIndex]['CHECKBOX_JS'] = false;
    }

    //出力しない項目の設定
    if(sNAMEUP == 'INSERT' || sNAMEUP == 'UPDATE')
    {
      js.field[nIndex]['SKIP_JS'] = true;
    }
    else if(sCOMMENT.indexOf('識別番号') >= 0)
    {
      js.field[nIndex]['SKIP_JS'] = true;
      writemsg('出力しない、skip:' + sCOMMENT);
    }
    else
    {
      js.field[nIndex]['SKIP_JS'] = false;
    }

    //一覧に全項目の幅の計算
    if(js.field[nIndex]['SKIP_JS'] == false)
    {
      nListTDLenAll += (nSHOW_LENGTH > nCOMMENT_LEN ? nSHOW_LENGTH : nCOMMENT_LEN);
    }
  } //for(var nIndex = 0; nIndex < js.field.length; nIndex++)

  nListItemWidthCount = nListTDLenAll;
  //実際長さは最大長さより大きい場合、一覧画面に項目表示長さの再調整
  if(nListTDLenAll > nListWinWidth)
  {
    for(var nIndex = 0; nIndex < js.field.length; nIndex++)
    {
      var len = parseInt('0' + js.field[nIndex]['FIELD_LENGTH_LIST_JS'], 10);
      if(len > 160)
      {
        js.field[nIndex]['FIELD_LENGTH_LIST_JS'] = 160;
      }
    } //for(var nIndex = 0; nIndex < js.field.length; nIndex++)
  }
}
//======================================
//全体処理を実行、重要！
GlobalProcess();
//======================================


function getFieldName(nIndex)
{
  return '' + js.field[nIndex]['FIELD_NAME_JS'];
}
function getFieldComment(nIndex)
{
  return '' + js.field[nIndex]['FIELD_COMMENT_JS'];
}
function getFieldCommentExt(nIndex)
{
  return '' + js.field[nIndex]['FIELD_COMMENT_EXT'];
}
//一覧画面に項目の表示幅
function getListFieldLength(nIndex)
{
  return '' + js.field[nIndex]['FIELD_LENGTH_LIST_JS'];
}
//新規と修正画面に編集項目の表示サイズ
function getModifyFieldShowSize(nIndex)
{
  return '' + js.field[nIndex]['FIELD_LENGTH_MODIFY_JS'];
}
//新規と修正画面に編集項目の編集可能長さ
function getModifyFieldMaxLength(nIndex)
{
  return '' + js.field[nIndex]['FIELD_SHOW_LENGTH'];
}
//画面に表示ため値、without ""
function getMaxValue(nIndex)
{
  return '' + js.field[nIndex]['FIELD_VALUE_MAX_NO_QUOTES'];
}
//リスト、新規と修正画面に出さない項目
function getIsSkip(nIndex)
{
  var str = '' + js.field[nIndex]['SKIP_JS'];
  if(str == 'false')
  {
    return false;
  }
  return true;
}
//PKであるか、修正画面に編集不可になる
function getIsPK(nIndex)
{
  var str = '' + js.field[nIndex]['FIELD_PK'];
  if(str == 'PK')
  {
    return true;
  }
  return false;
}
//CheckBoxであるか
function getIsCheckBox(nIndex)
{
  var str = '' + js.field[nIndex]['CHECKBOX_JS'];
  if(str == 'false')
  {
    return false;
  }
  return true;
}

